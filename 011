
.container {
    display: flex;
    flex-direction: column;
    padding-left: 15%;
    padding-right: 15%;
    padding-bottom: 10px;
}
.header {
    border-top: 4px solid currentcolor;
    padding: 9.6px 16px 8px;
    padding: .6rem 1rem .5rem;
    color: #1175ba;
    background: #f1f5f8;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-pack: justify;
    justify-content: space-between;
    -ms-flex-align: baseline;
    align-items: baseline;
    line-height: 1.4;
}
.header h1 {
    overflow: hidden;
    margin: 0;
    padding: 0;
    font-size: 16px;
    font-size: 1rem;
    font-weight: 400;
}
.input-group {
    box-sizing: border-box;
    margin: 8px 12px;
    padding: 6.4px 16px 4.8px;
    padding: .4rem 1rem .3rem;
    border: 1px solid rgba(0,0,0,.1);
    border-radius: 2px;
    width: calc(100% - 24px);
    background: #fff;
    margin-left: -1px;
    margin-right: -1px;
    width: 100%;
    margin-top: 0;
    padding: 16px;
    padding: 1rem;
}
:host ::ng-deep .mat-form-field-outline-thick {
    color: #2B73BA;
}
:host ::ng-deep .mat-form-field-infix {
    padding: 8px 0 10px 0;
}
.search {
    text-align: right;
}
.search button {
    margin-left: 10px;
}
.search mat-checkbox {
    margin-right: 10px;
    font-size: 13px;
}

.index {
    padding: .125em 0 0!important;
    width: 3.5rem;
    text-align: center;
    font-family: Arial,serif;
    font-weight: 700;
    font-size: 32px;
    font-size: 2rem;
    color: silver;
    transition: .1s linear;
    letter-spacing: -.05em;
    float:left;
}

.result-meta {
    display: flex;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
    -ms-flex-pack: justify;
    justify-content: space-between;
}
.result-meta tr {
    display: flex;
    -ms-flex-align: baseline;
    align-items: baseline;
    position: relative;
    padding: .5em 0;
}
.result-meta button {
    min-height: 1.75em;
    min-width: 40px;
    line-height: 1.5;
    margin-left: 10px;
}
.result-content tr {
    border-top: 1px solid rgba(0,0,0,.1);
    display: flex;
    align-items: baseline;
    position: relative;
    padding: .5em 0;
}
th {
    width: 5rem;
    font-weight: 700;
    text-align: left;
}
.result-content td {
    width: calc(100% - 5rem);
    line-height: 1.75;
}

.row {
    background-color: white;
    margin-top: 10px;
    border: 1px solid rgba(0,0,0,.1);
    font-size: 13px;
}
.row:hover {
    border-color: #54a8e0;
}
:host ::ng-deep .result-content em {
    border-radius: 2px;
    font-style: normal;
    background: rgba(255,215,0,.5);
}

table {
    width: calc(100% - 3.5rem);
    word-wrap: break-word;
    word-break: break-all;
    overflow: hidden;
}

tfoot .vote {
    border: 1px solid #eaeaea;
    border-radius: 1rem;
    line-height: calc(2rem - 2px);
    background: #f8f8f8;
    width: 200px;
    margin: auto;
    margin-bottom: 10px;
    padding: 2px 5px;
}
tfoot .vote mat-icon {
    top: 80%;
    vertical-align: middle;
    margin-left: 10px;
    color: #43a8ee;
    font-size: 18px;
    cursor: pointer;
}


.paginator {
    display: flex;
    min-height: 56px;
    width: 100%;
    text-align:center;
    color: rgba(0,0,0,.54);
}
:host ::ng-deep .paginator mat-icon {
    vertical-align: middle;
    margin-right: 15px;
    color: #ccc;
    cursor: default;
}
::ng-deep .paginator .mat-form-field-underline {
    display: none;
}

<div class="container">
    <div class="header">
        <h1>
            <span>MCHC Digital Transformation: </span>
            <strong>質問応答プロトタイプ (for MTPC)</strong>
        </h1>
        <span>Version 2</span>
    </div>
    <div class="input-group">
        <mat-form-field appearance="outline" style="width: 100%;">
            <input matInput placeholder="質問例: 幹細胞異型の発生機序" [(ngModel)]="q" (keyup.enter)="search()">
        </mat-form-field>
        <div class="search">
            <mat-checkbox labelPosition="before" [(ngModel)]="manualOnly">質問回答部分のみ検索: </mat-checkbox>
            <button mat-raised-button color="basic" (click)="clear()">クリア</button>
            <button mat-raised-button color="primary" (click)="search()">検索</button>
        </div>
    </div>

    <!-- 検索結果なし -->
    <div style="text-align: center;" *ngIf="qaList && qaList.length == 0">該当する情報がありません</div>

    <!-- ページネーター -->
    <div class="paginator" style="margin-bottom: -20px;" *ngIf="qaList && qaList.length > 0">
        <div style="margin: auto;">
            <span>Page:</span>
            <mat-form-field style="width: 45px; margin: 0 40px 0 10px;">
                <mat-select [(value)]="page" (selectionChange)="changePage()">
                    <mat-option value="{{pageIdx}}" *ngFor="let pageIdx of pageIdxList">{{pageIdx}}</mat-option>
                </mat-select>
            </mat-form-field>
            <span>Rows per page:</span>
            <mat-form-field style="width: 45px; margin: 0 40px 0 10px;">
                <mat-select [(value)]="rows" (selectionChange)="changeRows()">
                    <mat-option value="5">5</mat-option>
                    <mat-option value="10">10</mat-option>
                    <mat-option value="20">20</mat-option>
                </mat-select>
            </mat-form-field>
            <span style="margin-right: 40px;">{{start + 1}} - {{ end }} of {{numFound}}</span>
            <mat-icon (click)="previousPage()" [style.color]="hasPrevious? '#333':'#ccc'" [style.cursor]="hasPrevious? 'pointer':''">chevron_left</mat-icon>
            <mat-icon (click)="nextPage()" [style.color]="hasNext? '#333':'#ccc'" [style.cursor]="hasNext? 'pointer':''">chevron_right</mat-icon>
        </div>
    </div>

    <!-- QA一覧 -->
    <div class="row" [style.borderColor]="selectIdx==qa.index? '#1175ba':''" (click)="selectRow(qa.index)" *ngFor="let qa of qaList">
        <div class="index" [style.color]="selectIdx==qa.index? '#1175ba':'silver'">{{ qa.index }}</div>
        <div style="padding: 0 20px 0 0;">
            <table>
                <tbody class="result-meta">
                    <tr *ngIf="qa.entryDate">
                        <th style="width: 40px;">日付</th>
                        <td>{{qa.entryDate | date: 'yyyy/MM/dd'}}</td>
                    </tr>
                    <tr>
                        <th>文書番号</th>
                        <td>
                            <span>{{ qa.id }}</span>
                            <button mat-raised-button color="primary" (click)="open_edit_qa_dialog(qa.id, qa.question, qa.answer)" *ngIf="selectIdx==qa.index">編集</button>
                        </td>
                    </tr>
                </tbody>
                <tbody class="result-content">
                    <tr *ngIf="qa.htCategory; else noHtCategory">
                        <th>販売名</th>
                        <td [innerHTML]="qa.htCategory"></td>
                    </tr>
                    <ng-template #noHtCategory>
                        <tr *ngIf="qa.category">
                            <th>販売名</th>
                            <td [innerHTML]="qa.category"></td>
                        </tr>
                    </ng-template>

                    <tr *ngIf="qa.page">
                        <th>リンク</th>
                        <td><a href="./pdfs/{{qa.page}}" target="_blank">pdf</a></td>
                    </tr>

                    <tr *ngIf="qa.htQuestion; else noHtQuestion">
                        <th>内容</th>
                        <td [innerHTML]="qa.htQuestion | slice2" *ngIf="selectIdx!=qa.index"></td>
                        <td [innerHTML]="qa.htQuestion" *ngIf="selectIdx==qa.index"></td>
                    </tr>
                    <ng-template #noHtQuestion>
                        <tr *ngIf="qa.question">
                            <th>内容</th>
                            <td [innerHTML]="qa.question | slice2" *ngIf="selectIdx!=qa.index"></td>
                            <td [innerHTML]="qa.question" *ngIf="selectIdx==qa.index"></td>
                        </tr>
                    </ng-template>

                    <tr *ngIf="qa.htAnswer; else noHtAnswer">
                        <th>回答</th>
                        <td [innerHTML]="qa.htAnswer | slice2" *ngIf="selectIdx!=qa.index"></td>
                        <td [innerHTML]="qa.htAnswer" *ngIf="selectIdx==qa.index"></td>
                    </tr>
                    <ng-template #noHtAnswer>
                        <tr *ngIf="qa.answer">
                            <th>回答</th>
                            <td [innerHTML]="qa.answer | slice2" *ngIf="selectIdx!=qa.index"></td>
                            <td [innerHTML]="qa.answer" *ngIf="selectIdx==qa.index"></td>
                        </tr>
                    </ng-template>
                </tbody>
                <tfoot>
                    <tr>
                        <td style="text-align: center;">
                            <div class="vote">
                                <span><strong>評価してください:</strong></span>
                                <mat-icon>thumb_up</mat-icon>
                                <mat-icon>thumb_down</mat-icon>
                            </div>
                        </td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <!-- ページネーター -->
    <div class="paginator" *ngIf="qaList && qaList.length > 0">
        <div style="margin: auto;">
            <span>Page:</span>
            <mat-form-field style="width: 45px; margin: 0 40px 0 10px;">
                <mat-select [(value)]="page" (selectionChange)="changePage()">
                    <mat-option value="{{pageIdx}}" *ngFor="let pageIdx of pageIdxList">{{pageIdx}}</mat-option>
                </mat-select>
            </mat-form-field>
            <span>Rows per page:</span>
            <mat-form-field style="width: 45px; margin: 0 40px 0 10px;">
                <mat-select [(value)]="rows" (selectionChange)="changeRows()">
                    <mat-option value="5">5</mat-option>
                    <mat-option value="10">10</mat-option>
                    <mat-option value="20">20</mat-option>
                </mat-select>
            </mat-form-field>
            <span style="margin-right: 40px;">{{start + 1}} - {{ end }} of {{numFound}}</span>
            <mat-icon (click)="previousPage()" [style.color]="hasPrevious? '#333':'#ccc'" [style.cursor]="hasPrevious? 'pointer':''">chevron_left</mat-icon>
            <mat-icon (click)="nextPage()" [style.color]="hasNext? '#333':'#ccc'" [style.cursor]="hasNext? 'pointer':''">chevron_right</mat-icon>
        </div>
    </div>
</div>


import { Component, OnInit } from '@angular/core';
import { Qa } from '../../entities/Qa';
import { QaService } from '../../services/qa.service';
import { EditQaDialogComponent } from '../edit-qa-dialog/edit-qa-dialog.component';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';

// pageの初期値
const DEFAULT_PAGE = '1';
// rowsの初期値
const DEFAULT_ROWS = '5';

@Component({
  selector: 'app-main',
  templateUrl: './main.component.html',
  styleUrls: ['./main.component.css']
})
export class MainComponent implements OnInit {

  qaList: Qa[];
  selectIdx = 0;
  q = '';
  highLightWords: string[];
  manualOnly = false;
  page: string;
  rows: string;
  start: number;
  end: number;
  numFound: number;
  pageIdxList = [];
  hasNext: boolean;
  hasPrevious: boolean;
  editQaRef: MatDialogRef<EditQaDialogComponent>;

  constructor(
    private qaService: QaService,
    public dialog: MatDialog,
    ) { }

  ngOnInit() {
  }

  // 一覧のデータ（行）をクリック
  selectRow(idx) {
    this.selectIdx = idx;
  }

  // クリアボタンを押下
  clear() {
    this.q = '';
    this.qaList = null;
    this.selectIdx = 0;
    this.manualOnly = false;
  }

  // 検索ボタンを押下
  search() {
    this.page = DEFAULT_PAGE;
    this.rows = DEFAULT_ROWS;
    this.getResultList();
  }

  // ページネーターのPageを変わる
  changePage() {
    this.getResultList();
  }

  // ページネーターのRowsを変わる
  changeRows() {
    // 開始行は当前ページに表示するため
    if (this.start < 1 * Number(this.rows)) {
      this.page = DEFAULT_PAGE;
    } else {
      if (this.start % Number(this.rows) === 0) {
        this.page = (this.start / Number(this.rows) + 1).toString();
      } else {
        this.page = Math.ceil(this.start / Number(this.rows)).toString();
      }
    }
    this.getResultList();
  }

  // ページネーターのnextボタンを押下
  nextPage() {
    if (this.hasNext) {
      this.page = (Number(this.page) + 1).toString();
      this.getResultList();
    }
  }

  // ページネーターのpreviousボタンを押下
  previousPage() {
    if (this.hasPrevious) {
      this.page = (Number(this.page) - 1).toString();
      this.getResultList();
    }
  }

  getResultList() {
    this.start = (Number(this.page) - 1) * Number(this.rows);
    this.qaService.getQaList(this.q, this.start.toString(), this.rows, this.manualOnly).subscribe(
      data => {
        this.qaList = data;
        if (data.length > 0) {
          this.selectIdx = 0;
          this.end = this.start + Number(this.rows);
          this.numFound = data[0].numFound;
          if (this.end > this.numFound) {
            this.end = this.numFound;
          }
          const maxPage = Math.ceil(this.numFound / Number(this.rows));
          this.pageIdxList = [];
          for (let i = 1; i <= maxPage; i++) {
            this.pageIdxList.push(i);
          }
          this.hasNext = maxPage > Number(this.page);
          this.hasPrevious = Number(this.page) > 1;
        }
      },
      err => {
        // 処理なし
      }
    );
  }

  // 編集ボタンを押下
  open_edit_qa_dialog(id: string, question: string, answer: string) {
    this.editQaRef = this.dialog.open(
      EditQaDialogComponent,
      {width: '95%', maxWidth: '95%'}
      );
    this.editQaRef.componentInstance.id = id;
    this.editQaRef.componentInstance.question = question;
    this.editQaRef.componentInstance.answer = answer;
    this.editQaRef.afterClosed().subscribe(result => {
      if (result) {
        // const choosedUser = this.editQaRef.componentInstance.chooseOrg;
      }
      this.editQaRef = null;
    });
  }
}
