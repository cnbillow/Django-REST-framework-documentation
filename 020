  <fieldType name="text_ja" class="solr.TextField" autoGeneratePhraseQueries="false" positionIncrementGap="100">
    <analyzer>
      <tokenizer class="solr.JapaneseTokenizerFactory" mode="search" userDictionary="lang/userdict_ja.txt"/>
      <filter class="solr.SynonymFilterFactory" expand="true" ignoreCase="true" synonyms="synonyms.txt"/>
      <filter class="solr.JapaneseBaseFormFilterFactory"/>
      <filter class="solr.JapanesePartOfSpeechStopFilterFactory" tags="lang/stoptags_ja.txt"/>
      <filter class="solr.CJKWidthFilterFactory"/>
      <filter class="solr.StopFilterFactory" words="lang/stopwords_ja.txt" ignoreCase="true"/>
      <filter class="solr.JapaneseKatakanaStemFilterFactory" minimumLength="4"/>
      <filter class="solr.LowerCaseFilterFactory"/>
    </analyzer>
  </fieldType>

    <lst name="spellchecker">
      <str name="classname">solr.FileBasedSpellChecker</str>
      <str name="name">file</str>
      <str name="sourceLocation">spellings.txt</str>
      <str name="characterEncoding">UTF-8</str>
      <str name="field">question</str>
      <str name="spellcheckIndexDir">spellcheckerFile</str>
    </lst>
       
    <lst name="spellchecker">
      <str name="name">index</str>
      <str name="field">question</str>
      <str name="classname">solr.IndexBasedSpellChecker</str>
      <str name="spellcheckIndexDir">spellchecker</str>
      <str name="buildOnCommit">false</str>
    </lst>
    
  <requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
    <lst name="defaults">
      <!-- Solr will use suggestions from both the 'default' spellchecker
           and from the 'wordbreak' spellchecker and combine them.
           collations (re-written queries) can include a combination of
           corrections from both spellcheckers -->
      <str name="spellcheck.dictionary">file</str>
      <str name="spellcheck.dictionary">index</str>
      <str name="spellcheck">on</str>
      <str name="spellcheck.extendedResults">true</str>
      <str name="spellcheck.count">10</str>
      <str name="spellcheck.alternativeTermCount">5</str>
      <str name="spellcheck.maxResultsForSuggest">5</str>
      <str name="spellcheck.collate">true</str>
      <str name="spellcheck.collateExtendedResults">true</str>
      <str name="spellcheck.maxCollationTries">10</str>
      <str name="spellcheck.maxCollations">5</str>
      <str name="spellcheck.accuracy">0.5</str>
    </lst>
    <arr name="last-components">
      <str>spellcheck</str>
    </arr>
  </requestHandler>


managed-schema
<fieldType name="rdate" class="solr.DateRangeField"/>
<field name="issue_date" type="rdate" indexed="true" stored="true"/>

インデックスのスペルチェックの追加のせいでSolrへの登録処理が遅くなります。

画像の文字を認識
https://blog.csdn.net/qq_38486203/article/details/82856422
https://gammasoft.jp/blog/tesseract-ocr-install-on-windows/#download
tesseract

spinner
https://www.angularjswiki.com/angular/creating-progress-spinner-in-angular/

Material Design的图标字体
https://www.imooc.com/article/details/id/1042


pip install D:\tools\rsi-django-1.6.0.tar.gz
python manage.py loaddata initial_data.json 初期データを投入
python manage.py runserver --settings=qa_api.local_settings

vim filename
:set ff=unix
exc :wq
  
    regex = r"^(販売名|一般名|リンク|発行日|申請者名|内容)(:|：)(.+)"
    if re.match(regex, q):
        str_arr = re.findall(regex, q)[0]
        if str_arr[0] == "販売名":
            str0 = "category"
        if str_arr[0] == "一般名":
            str0 = "generic"
        if str_arr[0] == "リンク":
            str0 = "page"
        if str_arr[0] == "発行日":
            str0 = "issue_date"
        if str_arr[0] == "申請者名":
            str0 = "applicant"
        if str_arr[0] == "内容":
            str0 = "question"
        q = "".join([str0, ":", str_arr[2]])

    q = q.replace(" 販売名:", " category:").replace(" 販売名：", " category:")
    q = q.replace(" 一般名:", " generic:").replace(" 一般名：", " generic:")
    q = q.replace(" リンク:", " page:").replace(" リンク：", " page:")
    q = q.replace(" 発行日:", " issue_date:").replace(" 発行日：", " issue_date:")
    q = q.replace(" 申請者名:", " applicant:").replace(" 申請者名：", " applicant:")
    q = q.replace(" 内容:", " question:").replace(" 内容：", " question:")


    q = q.replace(/(販売名|一般名|リンク|発行日|申請者名|内容)：/gi, '');
    q = q.replace(/(販売名|一般名|リンク|発行日|申請者名|内容):/gi, '');
