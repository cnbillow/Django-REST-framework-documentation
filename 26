https://cwiki.apache.org/confluence/display/solr/SolrRelevancyFAQ#How_can_I_boost_the_score_of_newer_documents

solr.py
# coding: utf-8
import logging
import urllib
from datetime import datetime

import pysolr
import pytz
import requests
from dateutil.relativedelta import relativedelta
from django.conf import settings

logger = logging.getLogger(__name__)
edismax = {"defType": "edismax", }


def add_quotes_for_fq(item_array):
    """fq検索するときに、検索値を二重引用符追加"""
    ret_item_array = []
    for item in item_array:
        pos = item.find(':')
        field = item[:pos]
        value = item[pos + 1:]
        ret_item_array.append('%s:"%s"' % (field, value))
    return ret_item_array


def get_arrDateSearch(strDateSearch):
    if strDateSearch:
        date_item = strDateSearch.split(":")[0]
        str_date_start = strDateSearch.split(":")[1].split(" TO ")[0]
        if str_date_start != "*":
            d_date_start = datetime.strptime(str_date_start, "%Y/%m/%d").replace(tzinfo=pytz.timezone("Asia/Tokyo"))
            str_date_start = d_date_start.astimezone(pytz.timezone("UTC")).isoformat(timespec="seconds").split("+")[0] + "Z"
        str_date_end = strDateSearch.split(":")[1].split(" TO ")[1]
        if str_date_end != "*":
            d_date_start = datetime.strptime(str_date_end, "%Y/%m/%d").replace(tzinfo=pytz.timezone("Asia/Tokyo"))
            d_date_start += relativedelta(days=1)
            str_date_end = d_date_start.astimezone(pytz.timezone("UTC")).isoformat(timespec="seconds").split("+")[0] + "Z"
        return ["%s:[%s TO %s]" % (date_item, str_date_start, str_date_end)]
    else:
        return []


def get_arrFacetSearch(fqFormats, fqClasses):
    fqFormats = add_quotes_for_fq(fqFormats)
    fqClasses = add_quotes_for_fq(fqClasses)
    strFormats = fqFormats if len(fqFormats) <= 0 else " OR ".join(fqFormats)
    strClasses = fqClasses if len(fqClasses) <= 0 else " OR ".join(fqClasses)
    if strFormats and strClasses:
        return ["{!tag=format}(%s)" % strFormats, "{!tag=class}(%s)" % strClasses]
    else:
        if strFormats:
            return ["{!tag=format}(%s)" % strFormats]
        if strClasses:
            return ["{!tag=class}(%s)" % strClasses]
        return []


def get_fq(fqFormats, fqMajorClasses, fqClasses, fqSubClasses, strDateSearch):
    arrDateSearch = get_arrDateSearch(strDateSearch)
    arrFacetSearch = get_arrFacetSearch(fqFormats, fqMajorClasses + fqClasses + fqSubClasses)
    return arrDateSearch + arrFacetSearch


def get_q(q, query_mode):
    if query_mode == 1:
        return " AND ".join(q.split(" "))
    if query_mode in [2, 3]:
        arr = []
        for word in q.split(" "):
            arr.append('"%s"' % word)
        if query_mode == 2:
            return " ".join(arr)
        if query_mode == 3:
            return " AND ".join(arr)
    return q


def search_qa(q, fqFormats, fqMajorClasses, fqClasses, fqSubClasses, start, rows,
              strDateSearch="", query_mode=0, qf_option="title^1.2 doc_title clear_text",
              created_at_weight=0):
    """
    solrからQAを取得する

    Parameters
    ----------
    q: str
        検索キーワード
    fqFormats: list
        区分のリスト
    fqMajorClasses: list
        大項目のリスト
    fqClasses: list
        中項目のリスト
    fqSubClasses:list
        小項目のリスト
    start: int
        開始位置
    rows: int
        検索件数
    strDateSearch: str
        日付検索の文字列　例えば、created_at:2020/01/02 TO *
    query_mode: int
        モード切替用のフラグ
        0:従来通り動作
        1: 変数qをAND検索で使用する。たとえばq=A B  だった場合、　A AND B で検索する
        2: 変数qを完全一致（ダブルコーテーション）で検索する　たとえばq=AAA BBB だった場合、　"AAA" "BBB" で検索する
        3: 1と2両方のモード　"AAA" AND "BBB" で検索する
    qf_option: str
        qfの設定

    Returns
    -------
    検索のレスポンス
    """
    params = {
        "callback": "JSON_CALLBACK",
        "start": start,
        "rows": rows,
        "fl": "* score",
        "wt": "json",
        "hl": "true",
        # TODO ハイライト項目の追加・変更
        "hl.fl": "title, clear_text",
        "hl.fragsize": 200,
        "hl.snippets": 3,
        "fq": get_fq(fqFormats, fqMajorClasses, fqClasses, fqSubClasses, strDateSearch),
        "stopwords": "true",
        "sort": "score desc",
    }

    solr = pysolr.Solr(settings.DOCS_SOLR_URL)
    q = get_q(q, query_mode)
    if created_at_weight != 0:
        params["bf"] = "recip(ms(NOW,created_at),3.16e-11,1,1)^%s" % str(created_at_weight)
    edismax["qf"] = qf_option
    results = solr.search(q, **{**params, **edismax})
    return results.raw_response


def search_facet(q, fqFormats, fqMajorClasses, fqClasses, fqSubClasses, strDateSearch, qf_option="title^1.2 doc_title clear_text"):
    """
    solrからfacetを取得する

    Parameters
    ----------
    q: str
        検索キーワード

    Returns
    -------
    検索のレスポンス
    """
    params = {
        "facet": "on",
        # TODO ファセット項目の追加・変更
        "facet.field": ["{!ex=class}major_doc_class", "{!ex=class}doc_class", "{!ex=class}sub_doc_class", "{!ex=format}format"],
        "facet.limit": settings.FACET_LIMIT,
        "fq": get_fq(fqFormats, fqMajorClasses, fqClasses, fqSubClasses, strDateSearch),
        "rows": 0,
    }

    solr = pysolr.Solr(settings.DOCS_SOLR_URL)
    edismax["qf"] = qf_option
    results = solr.search(q, **{**params, **edismax})
    return results.raw_response


def reg_json_file(file, core_name):
    """
    solrにjsonファイルを登録する。まだコミットしない。

    Parameters
    ----------
    file: str
        ファイルパス
    core_name: str
        core名前

    Returns
    -------
    status_code: int
        リダイレクトのステータスコード
    """
    url = settings.SOLR_ORIGIN + "solr/%s/update" % core_name
    with open(file, "rb") as data_file:
        my_data = data_file.read()
    req = urllib.request.Request(url=url, data=my_data)
    req.add_header("Content-type", "application/json")
    f = urllib.request.urlopen(req)
    status_code = f.code
    return status_code


def reg_json_commit(core_name):
    """
    登録するjsonファイルをコミットする

    Parameters
    ----------
    core_name: str
        core名前

    Returns
    -------
    status_code: int
        レスポンスのステータスコード
    """
    url = settings.SOLR_ORIGIN + "solr/%s/update?commit=true&overwrite=true&boost=1.0" % core_name

    response = requests.get(url, headers={"Content-Type": "application/json"})
    return response.status_code


def solr_reload(core_name):
    """
    solrを再起動します

    Returns
    -------
    status_code: int
        レスポンスのステータスコード
    """
    params = {
        "action": "RELOAD",
        "core": core_name,
    }

    response = requests.get(settings.SOLR_ADMIN_URL, headers={"Content-Type": "application/json"}, params=params)
    return response.status_code


def get_spellcheck_suggestions(q):
    """
    スペルチェックをします

    Returns
    -------
    レスポンス
    """
    url = settings.DOCS_SOLR_URL + "spell?q=" + q
    return requests.get(url, headers={"Content-Type": "application/json"},)


def delete_all_doc(core_name):
    """
    全てのdocumentsを削除する

    Parameters
    ----------
    core_name: str
        core名前

    Returns
    -------
    無し
    """
    solr_url = settings.SOLR_ORIGIN + "solr/%s/" % core_name
    solr = pysolr.Solr(solr_url)
    solr.delete(q="*:*")
    reg_json_commit(core_name)
